import os

from db_utils import open_database, close_database


class Search:
    def __init__(self, keywords):
        self.keywords = keywords
        self.f = self.Function()
        self.in_string_1 = False
        self.in_string_2 = False
        self.in_comment = False
        self.is_function = False
        self.skip_next_line = False
        self.brackets = 0

    class Function:
        def __init__(self, project=None, file=None, name=None, keyword=None, code=""):
            self.project = project
            self.file = file
            self.name = name
            self.keyword = keyword
            self.code = code

        def __str__(self):
            return "Function ([{},{},{},{}])".format(self.keyword, self.project, self.file, self.name)

    def get_function(self):
        function_ = self.f
        self.f = self.Function()
        return function_

    def search_function(self, line):
        if self.skip_line(line):
            return False

        skip_next_index = False
        skip_current_line = False

        for i in range(len(line)):
            c = line[i]

            if skip_next_index:
                skip_next_index = False
                continue

            if self.in_string_1:
                if c == "\'":  # end of string ' '
                    self.in_string_1 = False
                elif c == "\\" and i + 1 < len(line):
                    skip_next_index = True
            elif self.in_string_2:
                if c == "\"":  # end of string " "
                    self.in_string_2 = False
                elif c == "\\" and i + 1 < len(line):
                    skip_next_index = True
            elif self.in_comment:
                if c == "*" and i + 1 < len(line) and line[i + 1] == "/":  # ends a block comment
                    self.in_comment = False
                    skip_next_index = True
            else:
                if c == "\'":  # beginning of string ' '
                    self.in_string_1 = True
                elif c == "\"":  # beginning of string " "
                    self.in_string_2 = True
                elif c == "/" and i + 1 < len(line) and line[i + 1] == "*":  # beginning of block comment
                    self.in_comment = True
                    skip_next_index = True
                elif c == "/" and i + 1 < len(line) and line[i + 1] == "/":  # beginning of line comment
                    self.f.code += "\n" + line[:i]
                    return False
                elif c == "{":
                    self.brackets += 1
                    if self.brackets == 1:

                        self.f.code = remove_comments(self.f.code)
                        declaration = self.search_declaration(self.f.code + line[:i])

                        self.is_function = declaration is not None
                        if self.is_function:
                            self.f.code = declaration + "{\n"
                            skip_current_line = True

                elif c == "}":
                    self.brackets -= 1
                    if self.brackets == 0:

                        if self.is_function:
                            self.f.code += line[:i + 1]
                            return True
                        self.f.code = line

                elif self.brackets == 0 and c == ";":
                    self.f.code = ""

        if not skip_current_line and self.is_function or not self.is_function and self.brackets == 0:
            self.f.code += line

        return False

    def search_declaration(self, text):
        if is_struct_or_enum(text):
            return None

        i = search_arguments(text)
        if i is None:
            return None
        else:
            args = remove_spaces(text[i[0]: i[1] + 1])

        i = search_name(text, i[0] - 1)
        if i is None:
            return None
        else:
            name = remove_spaces(text[i[0]: i[1] + 1])

        if not self.keywords or self.contains_keyword(name):
            self.f.name = name[1:] if name.startswith("*") else name
            return self.f.name + " " + args

        return None

    def contains_keyword(self, name):
        name = name.lower()

        for k in self.keywords:
            index = name.find(k[0])
            if index != -1:
                if self.exclude_keywords(name, index, k):
                    return True

        return False

    def exclude_keywords(self, name, index, k):
        indices = get_indices(name, index, k[0])

        for n in self.keywords.get(k):
            n_index = name.find(n)
            if name.find(n) != -1:
                if indices != get_indices(name, n_index, n):
                    self.f.keyword = k[1]
                    return True
                else:
                    return False

        self.f.keyword = k[1]

        return True

    def skip_line(self, line):
        if self.brackets > 0:
            return False

        if self.skip_next_line:
            if not line[:-1].endswith("\\"):
                self.skip_next_line = False
            return True
        if line.startswith("#"):
            if line[:-1].endswith("\\"):
                self.skip_next_line = True
            return True
        elif line.startswith("//"):
            return True

        return False


def is_struct_or_enum(text):
    for i in range(len(text) - 1, 0, -1):
        if not text[i].isspace():
            return text[i] != ")"


def remove_comments(text):
    s = []
    index_last_comment = 0
    skip_next_index = False

    for i in range(len(text)):
        c = text[i]

        if skip_next_index:
            skip_next_index = False
            continue

        if c == "/":
            if i + 1 < len(text) and text[i + 1] == "*":
                s += text[index_last_comment:i]
                skip_next_index = True
        elif c == "*":
            if i + 1 < len(text) and text[i + 1] == "/":
                index_last_comment = i + 2
                skip_next_index = True

    s += text[index_last_comment:]

    return "".join(s)


def search_matching_bracket(text, index, bracket1, bracket2):
    opened = 0

    for i in range(index, 0, -1):
        if text[i] == bracket1:
            opened += 1
        elif text[i] == bracket2:
            opened -= 1
            if opened == 0:
                return i

    return -1


def search_arguments(text):
    end = text.rfind(")")
    if end == -1:
        return None

    start = search_matching_bracket(text, end, ")", "(")
    if end == -1:
        return None

    return [start, end + 1]


def search_name(text, index):
    found = False

    for i in range(index, 0, -1):
        if text[i] == ")":
            return [search_matching_bracket(text, i, ")", "("), i]

        if found and text[i].isspace():
            return [i, index]
        elif not found and not text[i].isspace():
            found = True


def remove_spaces(text):
    import re
    return re.sub("\s+", " ", text).strip()


def lower_dict(dict_):
    return {(k[0].lower(), k[1]): v for k, v in dict_.items()}


def get_indices(name, index, k):
    indices = 1
    index = name.find(k, index + 1)
    while index != -1:
        indices += 1
        index = name.find(k, index + 1)

    return indices


def list_c_files(path):
    c_files = []
    for root, directories, file_names in os.walk(path):
        for file_name in file_names:
            if file_name.endswith(".c"):
                c_files.append(os.path.join(root, file_name))
    c_files.sort()
    return c_files


def search_in_dir(keywords, path, project):
    functions = []
    c_files = list_c_files(path)

    keywords = lower_dict(keywords)

    index = 0
    for c_file in c_files:
        index += 1
        print("({}/{}) {}".format(index, len(c_files), c_file))
        functions += search_in_file(keywords, path, c_file, project)

    return functions


def search_in_file(keywords, path, c_file, project):
    functions = []

    se = Search(keywords)

    with open(c_file, "r", encoding="iso-8859-1") as file:
        for line in file:
            if se.search_function(line):
                f = se.get_function()
                f.project = project
                f.file = file.name[len(path):]
                f.code = f.code.replace("\t", "    ")
                functions.append(f)

    return functions


def insert_functions_in_db(db, functions):
    connection, cursor = db

    for f in functions:
        cursor.execute("INSERT INTO functions (keyword, project, file, name, code) VALUES (?, ?, ?, ?, ?)",
                       (f.keyword, f.project, f.file, f.name, f.code))

    connection.commit()

    return len(functions)


def get_functions_from_database(db, where=None):
    connection, cursor = db

    query = "SELECT * FROM functions"
    if where:
        query += " WHERE " + where

    cursor.execute(query)

    functions = []

    for row in cursor.fetchall():
        functions.append(Search.Function(project=row[2], file=row[3], name=row[4], keyword=row[1], code=row[5]))

    return functions


def merge_databases(path_db_from, path_db_to):
    db_from = open_database(path_db_from)
    db_to = open_database(path_db_to)

    insert_functions_in_db(db_to, get_functions_from_database(db_from))

    close_database(db_from)
    close_database(db_to)


def main():
    db = open_database("data/functions.db")
    db[1].execute("CREATE TABLE IF NOT EXISTS functions (id integer PRIMARY KEY, keyword text, "
                  "project text NOT NULL, file text NOT NULL, name text NOT NULL, code text NOT NULL );")

    keywords = {
        ("decod", "encoding"): [],
        ("encod", "encoding"): [],
        ("enc", "encryption"): ["reference", "sequence", "latenc", "frequenc", "dependenc"],
        ("dec", "encryption"): ["decrement", "decrease", "decimal", "decompress", "decfloat", "decnum", "decomp",
                                "declare"],
        ("cry", "encryption"): [],
        ("str", "string"): ["construct", "destruct", "destroy", "instruction", "stream", "struct", "strp", "strip",
                            "registr"],
        ("sort", "sorting"): []
    }

    i = 0
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/binutils-gdb-binutils-2_30", "binutils"))
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/liuliu-ccv-07fc691", "ccv"))
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/coreutils-8.29", "coreutils"))
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/curl-7.61.0", "curl"))
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/gsl-2.5.0", "gsl"))
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/openssl-OpenSSL_1_1_1-pre9", "openssl"))
    i += insert_functions_in_db(db, search_in_dir(keywords, "data/datasets", "datasets"))

    close_database(db)

    print("{} functions".format(i))


if __name__ == '__main__':
    main()
